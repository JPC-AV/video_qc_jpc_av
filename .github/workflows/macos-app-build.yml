name: Build macOS App

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-macos:
    strategy:
      matrix:
        include:
          - runner: macos-13      # Intel
            arch: x86_64
          - runner: macos-14      # Apple Silicon  
            arch: arm64
    
    runs-on: ${{ matrix.runner }}
    
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: '3.10'  # Simplified version spec
        miniforge-version: latest
        activate-environment: JPC_AV
        auto-activate-base: false
        
    - name: Install dependencies
      shell: bash -el {0}  # Required for conda
      env:
        MACOSX_DEPLOYMENT_TARGET: "12.0"
      run: |
        # Verify conda environment
        conda info
        which python
        python --version
        
        # Install PyInstaller via conda-forge (more reliable)
        conda install -c conda-forge pyinstaller -y
        
        # Install your package dependencies
        pip install -e .
        
        # Verify installation and Python structure
        echo "=== Python Structure Check ==="
        python -c "
        import sys
        import sysconfig
        print('Python executable:', sys.executable)
        print('Python prefix:', sys.prefix)
        print('Platform:', sysconfig.get_platform())
        print('Framework support:', hasattr(sys, 'base_prefix'))
        "
        
        # Verify AV_Spex imports
        python -c "import AV_Spex; print('✅ AV_Spex imported successfully')"
        
    - name: Get version from pyproject.toml
      shell: bash -el {0}
      id: get_version
      run: |
        VERSION=$(grep -m 1 "version" pyproject.toml | grep -o '"[^"]*"' | sed 's/"//g')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building AV-Spex version $VERSION for ${{ matrix.arch }}"
        
    - name: Clean previous build artifacts
      shell: bash -el {0}
      run: |
        rm -rf dist/ build/
        
    - name: Build with PyInstaller
      shell: bash -el {0}
      env:
        MACOSX_DEPLOYMENT_TARGET: "12.0"
      run: |
        echo "Building for ${{ matrix.arch }} with macOS 12+ compatibility..."
        pyinstaller --noconfirm --log-level=INFO avspex.spec
        
    - name: Verify build and Python framework
      shell: bash -el {0}
      run: |
        echo "=== Build output ==="
        ls -la dist/
        
        if [ -d "dist/AV-Spex.app" ]; then
          echo "✅ App bundle created successfully for ${{ matrix.arch }}"
          
          echo "=== Binary info ==="
          file "dist/AV-Spex.app/Contents/MacOS/AV-Spex"
          
          echo "=== Python framework check ==="
          if [ -d "dist/AV-Spex.app/Contents/Frameworks/Python.framework" ]; then
            echo "✅ Python.framework structure found"
            ls -la "dist/AV-Spex.app/Contents/Frameworks/Python"*
            file "dist/AV-Spex.app/Contents/Frameworks/Python.framework/Versions/3.10/Python" 2>/dev/null || echo "Framework version mismatch"
          else
            echo "❌ Python.framework structure missing"
            echo "Available Python files:"
            find "dist/AV-Spex.app/Contents/Frameworks/" -name "*python*" -o -name "*Python*" | head -10
          fi
          
          echo "=== Testing app executable ==="
          test -x ./dist/AV-Spex.app/Contents/MacOS/AV-Spex && echo "✅ Executable is valid" || echo "❌ Executable problem"
          
        else
          echo "❌ App bundle not found!"
          echo "Contents of dist/:"
          ls -la dist/
          exit 1
        fi
        
    - name: Create build info
      shell: bash -el {0}
      run: |
        cat > dist/build-info.json << EOF
        {
          "version": "${{ steps.get_version.outputs.VERSION }}",
          "commit": "${{ github.sha }}",
          "ref": "${{ github.ref }}",
          "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "workflow_run_id": "${{ github.run_id }}",
          "architecture": "${{ matrix.arch }}",
          "python_version": "$(python --version)",
          "python_type": "conda"
        }
        EOF
        
        echo "Build info created:"
        cat dist/build-info.json
        
    - name: Create app bundle archive
      shell: bash -el {0}
      run: |
        cd dist
        echo "Creating archive for version ${{ steps.get_version.outputs.VERSION }}"
        
        # Verify files exist before archiving
        ls -la
        test -d AV-Spex.app || (echo "❌ AV-Spex.app not found" && exit 1)
        test -f build-info.json || (echo "❌ build-info.json not found" && exit 1)
        
        # Create the archive
        tar -czf AV-Spex-${{ steps.get_version.outputs.VERSION }}-${{ matrix.arch }}-unsigned.tar.gz AV-Spex.app build-info.json
        
        # Verify archive was created
        ls -la *.tar.gz
        echo "Archive created successfully"
        
    - name: Upload unsigned app bundle
      uses: actions/upload-artifact@v4
      with:
        name: av-spex-${{ steps.get_version.outputs.VERSION }}-${{ matrix.arch }}-unsigned
        path: dist/AV-Spex-${{ steps.get_version.outputs.VERSION }}-${{ matrix.arch }}-unsigned.tar.gz
        retention-days: 30
