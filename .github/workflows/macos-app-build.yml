name: Build and Release macOS App

on:
  push:
    tags:
      - 'v*' # This will trigger the workflow when you push a tag starting with 'v'
  workflow_dispatch: # This allows manual triggering from the GitHub UI

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          # Install your package in development mode
          pip install -e .
          # Install any additional dependencies your app needs
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Prepare environment
        run: |
          # Display repository structure to understand paths
          echo "Repository structure:"
          find . -maxdepth 3 -type d | sort
          
          # Check for gui_launcher.py
          echo "Looking for gui_launcher.py:"
          find . -name "gui_launcher.py" | sort
          
          # Make sure the icon file is available
          if [ ! -f "av_spex_the_logo.icns" ]; then
            echo "Looking for icon file:"
            find . -name "*.icns" | sort
            find . -name "*.icns" -exec cp {} . \; || echo "No icon file found"
          fi

      - name: Build with PyInstaller
        run: |
          # Set environment variables for universal binary
          export ARCHFLAGS="-arch x86_64 -arch arm64"
          export MACOSX_DEPLOYMENT_TARGET=10.13
          
          # Build with PyInstaller using the spec file
          echo "Building with PyInstaller"
          pyinstaller avspex.spec
          
          # Verify the built app
          echo "Checking build results:"
          ls -la dist/ || echo "dist directory not found"
          
          if [ -d "dist/AV-Spex.app" ]; then
            echo "PyInstaller build successful"
          else
            echo "PyInstaller build failed"
            exit 1
          fi

      - name: Create DMG
        run: |
          # Install create-dmg
          brew install create-dmg
          
          # Get version from pyproject.toml
          VERSION=$(grep -m 1 "version" pyproject.toml | grep -o '"[^"]*"' | sed 's/"//g')
          echo "Building AV-Spex version $VERSION"
          
          # Show the content of the dist directory
          echo "Contents of dist directory before DMG creation:"
          ls -la dist/
          
          # Create a folder to prepare our DMG in
          mkdir -p dist/dmg
          # Empty the dmg folder if it exists
          rm -rf dist/dmg/*
          # Copy the app bundle to the dmg folder
          cp -R "dist/AV-Spex.app" dist/dmg
          # Make sure permissions are correct
          chmod -R 755 dist/dmg/AV-Spex.app
          
          # Create the DMG
          echo "Creating DMG..."
          create-dmg \
            --volname "AV-Spex $VERSION" \
            --volicon "av_spex_the_logo.icns" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "AV-Spex.app" 175 120 \
            --hide-extension "AV-Spex.app" \
            --app-drop-link 425 120 \
            --no-internet-enable \
            "dist/AV-Spex-$VERSION.dmg" \
            "dist/dmg" || echo "DMG creation failed with error code $? but continuing workflow"
          
          # List created files
          echo "Files in dist directory after DMG creation:"
          ls -la dist/

      - name: Upload DMG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: AV-Spex-DMG
          path: dist/AV-Spex-*.dmg
          if-no-files-found: warn

      # Modified to run for both manual triggers and tags if secrets are available
      - name: Code Sign and Notarize
        if: (github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')) && env.APPLE_ID != ''
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: |
          # Verify secrets are available
          if [ -z "$APPLE_ID" ] || [ -z "$APPLE_ID_PASSWORD" ] || [ -z "$APPLE_TEAM_ID" ] || [ -z "$APPLE_DEVELOPER_ID" ]; then
            echo "⚠️ Apple signing credentials not available. Skipping notarization."
            exit 0
          fi

          VERSION=$(grep -m 1 "version" pyproject.toml | grep -o '"[^"]*"' | sed 's/"//g')
          DMG_PATH="dist/AV-Spex-$VERSION.dmg"
          
          # Create entitlements file if it doesn't exist
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
              <key>com.apple.security.automation.apple-events</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Sign each framework/library/plugin individually first
          echo "Signing frameworks and libraries..."
          find dist/dmg/AV-Spex.app/Contents/Frameworks -type f -name "*.so" -o -name "*.dylib" | while read file; do
            codesign --force --timestamp --options runtime --sign "$APPLE_DEVELOPER_ID" "$file" || echo "Signing $file failed but continuing"
          done
          
          # Sign Python executables
          echo "Signing Python executables..."
          find dist/dmg/AV-Spex.app/Contents -type f -name "python*" | while read file; do
            codesign --force --timestamp --options runtime --sign "$APPLE_DEVELOPER_ID" "$file" || echo "Signing $file failed but continuing"
          done
          
          # Sign any other executables in MacOS folder
          echo "Signing other executables..."
          find dist/dmg/AV-Spex.app/Contents/MacOS -type f -perm +111 | while read file; do
            codesign --force --timestamp --options runtime --entitlements entitlements.plist --sign "$APPLE_DEVELOPER_ID" "$file" || echo "Signing $file failed but continuing"
          done
          
          # Sign the main app bundle with entitlements
          echo "Signing main application bundle..."
          codesign --force --deep --timestamp --options runtime --entitlements entitlements.plist --sign "$APPLE_DEVELOPER_ID" dist/dmg/AV-Spex.app || echo "Signing app bundle failed but continuing"
          
          # Rebuild the DMG with signed app
          test -f "$DMG_PATH" && rm "$DMG_PATH"
          create-dmg \
            --volname "AV-Spex $VERSION" \
            --volicon "av_spex_the_logo.icns" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "AV-Spex.app" 175 120 \
            --hide-extension "AV-Spex.app" \
            --app-drop-link 425 120 \
            --no-internet-enable \
            "$DMG_PATH" \
            "dist/dmg" || echo "Signed DMG creation failed but continuing"
          
          # Sign the DMG itself
          codesign --force --timestamp --sign "$APPLE_DEVELOPER_ID" "$DMG_PATH" || echo "DMG signing failed but continuing"
          
          echo "Submitting DMG for notarization..."
          # Create a keychain profile for notarization
          xcrun notarytool store-credentials "github-actions" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" || echo "Creating keychain profile failed but continuing"
          
          # Submit DMG for notarization using the keychain profile
          xcrun notarytool submit "$DMG_PATH" \
            --keychain-profile "github-actions" \
            --wait \
            --timeout 1800 || echo "Notarization submission failed but continuing"
          
          # Staple the notarization ticket to the DMG
          echo "Stapling ticket to DMG..."
          xcrun stapler staple "$DMG_PATH" || echo "Stapling failed but continuing"
          
          # Add more verbose output to diagnose notarization issues
          echo "Getting notarization history for additional debugging information:"
          xcrun notarytool history --keychain-profile "github-actions" || echo "Could not retrieve notarization history"
          
          echo "Build and notarization process complete for AV-Spex version $VERSION!"
          
          # Upload the notarized DMG as a separate artifact
          mkdir -p notarized
          cp "$DMG_PATH" notarized/

      # Optional: Upload the notarized DMG as a separate artifact
      - name: Upload Notarized DMG
        if: (github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')) && env.APPLE_ID != ''
        uses: actions/upload-artifact@v4
        with:
          name: AV-Spex-Notarized-DMG
          path: notarized/*.dmg
          if-no-files-found: warn
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}

      # Keep this step only for tag-based releases
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/AV-Spex-*.dmg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}