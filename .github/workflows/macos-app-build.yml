name: Build macOS App

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-macos:
    strategy:
      matrix:
        include:
          - runner: macos-13      # Intel
            arch: x86_64
          - runner: macos-14      # Apple Silicon  
            arch: arm64
    
    runs-on: ${{ matrix.runner }}
    
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      env:
        MACOSX_DEPLOYMENT_TARGET: "12.0"  # Target macOS 12 (Monterey)
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -e .
        
    - name: Get version from pyproject.toml
      id: get_version
      run: |
        VERSION=$(grep -m 1 "version" pyproject.toml | grep -o '"[^"]*"' | sed 's/"//g')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building AV-Spex version $VERSION for ${{ matrix.arch }}"
        
    - name: Clean previous build artifacts
      run: |
        rm -rf dist/ build/
        
    - name: Build with PyInstaller
      env:
        MACOSX_DEPLOYMENT_TARGET: "12.0"  # Target macOS 12 (Monterey)
      run: |
        echo "Building for ${{ matrix.arch }} with macOS 12+ compatibility..."
        pyinstaller --noconfirm avspex.spec
        
    - name: Verify build output
      run: |
        ls -la dist/
        if [ -d "dist/AV-Spex.app" ]; then
          echo "✅ App bundle created successfully for ${{ matrix.arch }}"
          file "dist/AV-Spex.app/Contents/MacOS/AV-Spex"
        else
          echo "❌ App bundle not found!"
          exit 1
        fi
        
    - name: Create build info
      run: |
        cat > dist/build-info.json << EOF
        {
          "version": "${{ steps.get_version.outputs.VERSION }}",
          "commit": "${{ github.sha }}",
          "ref": "${{ github.ref }}",
          "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "workflow_run_id": "${{ github.run_id }}",
          "architecture": "${{ matrix.arch }}"
        }
        EOF
        
    - name: Create app bundle archive
      run: |
        cd dist
        tar -czf AV-Spex-${{ steps.get_version.outputs.VERSION }}-${{ matrix.arch }}-unsigned.tar.gz AV-Spex.app build-info.json
        
    - name: Upload unsigned app bundle
      uses: actions/upload-artifact@v4
      with:
        name: av-spex-${{ steps.get_version.outputs.VERSION }}-${{ matrix.arch }}-unsigned
        path: dist/AV-Spex-${{ steps.get_version.outputs.VERSION }}-${{ matrix.arch }}-unsigned.tar.gz
        retention-days: 30
        
  combine-architectures:
    needs: build-macos
    runs-on: macos-13
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Intel build
      uses: actions/download-artifact@v4
      with:
        name: av-spex-${{ needs.build-macos.outputs.version }}-x86_64-unsigned
        path: ./intel
        
    - name: Download ARM64 build  
      uses: actions/download-artifact@v4
      with:
        name: av-spex-${{ needs.build-macos.outputs.version }}-arm64-unsigned
        path: ./arm64
        
    - name: Extract and combine architectures
      run: |
        # Extract both builds
        cd intel && tar -xzf *.tar.gz && cd ..
        cd arm64 && tar -xzf *.tar.gz && cd ..
        
        # Create combined directory
        mkdir -p dist
        cp -R intel/AV-Spex.app dist/
        
        # Use lipo to create universal binary
        lipo -create \
          intel/AV-Spex.app/Contents/MacOS/AV-Spex \
          arm64/AV-Spex.app/Contents/MacOS/AV-Spex \
          -output dist/AV-Spex.app/Contents/MacOS/AV-Spex
          
        # Verify universal binary
        echo "Verifying universal binary:"
        file dist/AV-Spex.app/Contents/MacOS/AV-Spex
        lipo -info dist/AV-Spex.app/Contents/MacOS/AV-Spex
        
        # Create build info
        cp intel/build-info.json dist/
        
        # Create final archive
        cd dist
        tar -czf AV-Spex-${{ needs.build-macos.outputs.version }}-universal-unsigned.tar.gz AV-Spex.app build-info.json
        
    - name: Upload universal app bundle
      uses: actions/upload-artifact@v4
      with:
        name: av-spex-${{ needs.build-macos.outputs.version }}-universal-unsigned
        path: dist/AV-Spex-${{ needs.build-macos.outputs.version }}-universal-unsigned.tar.gz
        retention-days: 30
