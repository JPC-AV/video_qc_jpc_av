name: Build and Release macOS App

on:
  push:
    tags:
      - 'v*' # This will trigger the workflow when you push a tag starting with 'v'
  workflow_dispatch: # This allows manual triggering from the GitHub UI

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Configure Python for Universal Binary
        run: |
          # Set environment variables to build universal binaries when compiling
          echo "ARCHFLAGS=-arch x86_64 -arch arm64" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          # Install your package in development mode
          pip install -e .
          # Install any additional dependencies your app needs
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Build with PyInstaller
        run: |
          # Ensure we're building a universal binary
          export ARCHFLAGS="-arch x86_64 -arch arm64"
          
          # Check if PyInstaller is properly recognizing universal2 option
          echo "Building with PyInstaller using universal2 option for Intel and Apple Silicon compatibility"
          pyinstaller avspex.spec
          
          # Verify the built app is universal
          echo "Verifying the app is a universal binary:"
          lipo -info dist/AV-Spex.app/Contents/MacOS/AV-Spex || echo "Main executable not found, checking alternatives..."
          find dist/AV-Spex.app -name "*.so" -or -name "*.dylib" | head -n 3 | xargs lipo -info

      - name: Import Apple Developer Certificate
        # Run for both manual triggers and tag pushes if secrets are available
        if: (github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')) && env.APPLE_CERTIFICATE_BASE64 != ''
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create a temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -t 3600 -u $KEYCHAIN_PATH
          
          # Import certificate to keychain
          echo "$APPLE_CERTIFICATE_BASE64" | base64 --decode > $RUNNER_TEMP/certificate.p12
          security import $RUNNER_TEMP/certificate.p12 -k $KEYCHAIN_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Prepare and Sign DMG
        # Run for both manual triggers and tag pushes if secrets are available
        if: (github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')) && env.APPLE_DEVELOPER_ID != ''
        env:
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: |
          # Get version from pyproject.toml
          VERSION=$(grep -m 1 "version" pyproject.toml | grep -o '"[^"]*"' | sed 's/"//g')
          echo "Building AV-Spex version $VERSION"
          
          # Install create-dmg
          brew install create-dmg
          
          # Create a folder to prepare our DMG in
          mkdir -p dist/dmg
          # Empty the dmg folder if it exists
          rm -rf dist/dmg/*
          # Copy the app bundle to the dmg folder
          cp -R "dist/AV-Spex.app" dist/dmg
          # Make sure permissions are correct
          chmod -R 755 dist/dmg/AV-Spex.app
          
          # Create entitlements file
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
              <key>com.apple.security.automation.apple-events</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Sign each framework/library/plugin individually first
          echo "Signing frameworks and libraries..."
          find dist/dmg/AV-Spex.app/Contents/Frameworks -type f -name "*.so" -o -name "*.dylib" | while read file; do
            codesign --force --timestamp --options runtime --sign "$APPLE_DEVELOPER_ID" "$file" || echo "Failed to sign $file but continuing"
          done
          
          # Sign Python executables
          echo "Signing Python executables..."
          find dist/dmg/AV-Spex.app/Contents -type f -name "python*" | while read file; do
            codesign --force --timestamp --options runtime --sign "$APPLE_DEVELOPER_ID" "$file" || echo "Failed to sign $file but continuing"
          done
          
          # Sign any other executables in MacOS folder
          echo "Signing other executables..."
          find dist/dmg/AV-Spex.app/Contents/MacOS -type f -perm +111 | while read file; do
            codesign --force --timestamp --options runtime --entitlements entitlements.plist --sign "$APPLE_DEVELOPER_ID" "$file" || echo "Failed to sign $file but continuing"
          done
          
          # Sign the main app bundle with entitlements
          echo "Signing main application bundle..."
          codesign --force --deep --timestamp --options runtime --entitlements entitlements.plist --sign "$APPLE_DEVELOPER_ID" dist/dmg/AV-Spex.app || echo "Failed to sign app bundle but continuing"
          
          # Verify the application is properly signed and is a universal binary
          echo "Verifying signing and architecture:"
          codesign --verify --verbose dist/dmg/AV-Spex.app || echo "Verification failed but continuing"
          
          # Check architecture of main executable and a few libraries
          echo "Checking architecture of binaries:"
          find dist/dmg/AV-Spex.app -type f -name "AV-Spex" | xargs lipo -info || echo "Main executable not found"
          find dist/dmg/AV-Spex.app -name "*.so" -or -name "*.dylib" | head -n 3 | xargs lipo -info
          
          # If the DMG already exists, delete it
          test -f "dist/AV-Spex-$VERSION.dmg" && rm "dist/AV-Spex-$VERSION.dmg"
          
          # Create the DMG with version number
          create-dmg \
            --volname "AV-Spex $VERSION" \
            --volicon "av_spex_the_logo.icns" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "AV-Spex.app" 175 120 \
            --hide-extension "AV-Spex.app" \
            --app-drop-link 425 120 \
            --no-internet-enable \
            "dist/AV-Spex-$VERSION.dmg" \
            "dist/dmg" || echo "DMG creation failed but continuing"
          
          # Sign the DMG itself
          codesign --force --timestamp --sign "$APPLE_DEVELOPER_ID" "dist/AV-Spex-$VERSION.dmg" || echo "DMG signing failed but continuing"
          # Verify signing
          codesign --verify --verbose "dist/AV-Spex-$VERSION.dmg" || echo "DMG verification failed but continuing"

      - name: Notarize macOS App
        # Run for both manual triggers and tag pushes if secrets are available
        if: (github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')) && env.APPLE_ID != ''
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          VERSION=$(grep -m 1 "version" pyproject.toml | grep -o '"[^"]*"' | sed 's/"//g')
          DMG_PATH="dist/AV-Spex-$VERSION.dmg"
          
          echo "Submitting DMG for notarization..."
          # Create a keychain profile for notarization
          xcrun notarytool store-credentials "github-actions" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" || echo "Creating keychain profile failed but continuing"
          
          # Submit DMG for notarization and capture the submission ID
          echo "Submitting for notarization and waiting for results..."
          SUBMISSION_OUTPUT=$(xcrun notarytool submit "$DMG_PATH" \
            --keychain-profile "github-actions" \
            --wait \
            --timeout 1800)
          
          echo "Notarization submission output:"
          echo "$SUBMISSION_OUTPUT"
          
          # Extract submission ID from output
          SUBMISSION_ID=$(echo "$SUBMISSION_OUTPUT" | grep "id:" | head -1 | awk '{print $2}')
          
          if [ -n "$SUBMISSION_ID" ]; then
            echo "Getting detailed notarization logs for submission $SUBMISSION_ID..."
            xcrun notarytool log "$SUBMISSION_ID" --keychain-profile "github-actions" > notarization_log.json
            echo "Notarization log details:"
            cat notarization_log.json
          fi
          
          # Staple the notarization ticket to the DMG
          echo "Stapling ticket to DMG..."
          xcrun stapler staple "$DMG_PATH" || echo "Stapling failed but continuing"
          
          # Get notarization history for debugging
          echo "Getting notarization history for context:"
          xcrun notarytool history --keychain-profile "github-actions" || echo "Failed to retrieve history but continuing"
          
          echo "Build and notarization process complete for AV-Spex version $VERSION!"
          
          # Create notarized folder for artifact upload
          mkdir -p notarized
          cp "$DMG_PATH" notarized/

      - name: Upload DMG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: AV-Spex-DMG
          path: dist/AV-Spex-*.dmg
          if-no-files-found: warn

      - name: Upload Notarized DMG
        if: (github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')) && env.APPLE_ID != ''
        uses: actions/upload-artifact@v4
        with:
          name: AV-Spex-Notarized-DMG
          path: notarized/*.dmg
          if-no-files-found: warn
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/AV-Spex-*.dmg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}