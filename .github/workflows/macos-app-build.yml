name: Build and Release macOS App

on:
  push:
    tags:
      - 'v*' # This will trigger the workflow when you push a tag starting with 'v'
  workflow_dispatch: # This allows manual triggering from the GitHub UI

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Prepare environment
        run: |
          # Display repository structure to understand the path issue
          echo "Repository structure:"
          find . -type d -name "AV_Spex" | sort
          
          # Create a modified spec file for GitHub Actions
          cat > github_avspex.spec << EOF
import os
from pathlib import Path

# Get the directory where this spec file is located
spec_dir = os.path.abspath('.')
# Get the project root directory (same as spec_dir in GitHub Actions)
root_dir = spec_dir

# Find the AV_Spex directory (search in common locations)
av_spex_locations = [
    os.path.join(root_dir, 'src/AV_Spex'),
    os.path.join(root_dir, 'AV_Spex'),
    os.path.join(root_dir, 'src')
]

for loc in av_spex_locations:
    if os.path.exists(loc):
        if os.path.basename(loc) == 'AV_Spex':
            av_spex_dir = loc
            break
        elif os.path.exists(os.path.join(loc, 'AV_Spex')):
            av_spex_dir = os.path.join(loc, 'AV_Spex')
            break
else:
    av_spex_dir = os.path.join(root_dir, 'src/AV_Spex')  # Default fallback

# Print paths for debugging
print(f"spec_dir: {spec_dir}")
print(f"root_dir: {root_dir}")
print(f"av_spex_dir: {av_spex_dir}")

block_cipher = None

datas = []
# Only add paths that exist
config_path = os.path.join(av_spex_dir, 'config')
if os.path.exists(config_path):
    datas.append((config_path, 'AV_Spex/config'))
else:
    print(f"Warning: Config path not found: {config_path}")

logo_path = os.path.join(av_spex_dir, 'logo_image_files')
if os.path.exists(logo_path):
    datas.append((logo_path, 'AV_Spex/logo_image_files'))
else:
    print(f"Warning: Logo path not found: {logo_path}")

pyproject_path = os.path.join(root_dir, 'pyproject.toml')
if os.path.exists(pyproject_path):
    datas.append((pyproject_path, '.'))
else:
    print(f"Warning: pyproject.toml not found: {pyproject_path}")

a = Analysis(['gui_launcher.py'],
    pathex=[],
    binaries=[],
    datas=datas,
    hiddenimports=[
        'AV_Spex.processing',
        'AV_Spex.utils',
        'AV_Spex.checks'
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[
        'PyQt6.QtDBus', 'PyQt6.QtPdf', 'PyQt6.QtSvg', 'PyQt6.QtNetwork',
        'plotly.matplotlylib', 'plotly.figure_factory'
    ],
    noarchive=False,
    cipher=block_cipher
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='AV-Spex',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    runtime_tmpdir=None,
    console=False,
    codesign_identity=None,
    entitlements_file=None, 
    target_arch=None,  # Build for the current architecture
    universal2=True,   # Build a universal binary (both Intel and Apple Silicon)
    icon='av_spex_the_logo.icns'
)

coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=True,
    upx=True,
    upx_exclude=[],
    name='AV-Spex'
)

app = BUNDLE(coll,
    name='AV-Spex.app',
    icon=os.path.join(spec_dir, 'av_spex_the_logo.icns'),
    bundle_identifier='com.jpc.avspex'
)
EOF

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          # Install your package in development mode
          pip install -e .
          # Install any additional dependencies your app needs
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Build with PyInstaller
        run: |
          # Set environment variables to build universal binaries when compiling
          export ARCHFLAGS="-arch x86_64 -arch arm64"
          export MACOSX_DEPLOYMENT_TARGET=10.13
          
          # Find gui_launcher.py
          echo "Looking for gui_launcher.py:"
          find . -name "gui_launcher.py" | sort
          
          # Copy icon file to root if needed
          if [ ! -f "av_spex_the_logo.icns" ]; then
            find . -name "*.icns" -exec cp {} . \; || echo "No icon file found"
          fi
          
          # Ensure we're building a universal binary
          echo "Building with PyInstaller using the modified spec file"
          pyinstaller github_avspex.spec
          
          # Verify the built app
          if [ -d "dist/AV-Spex.app" ]; then
            echo "PyInstaller build successful"
            find dist/AV-Spex.app -name "*.so" -or -name "*.dylib" | head -n 3 | xargs lipo -info || echo "No binary files found to check"
          else
            echo "PyInstaller build failed - checking directory contents:"
            ls -la dist/ || echo "dist directory not found"
            exit 1
          fi

      - name: Import Apple Developer Certificate
        # Only run this step if this is a tag push and secrets are available
        if: startsWith(github.ref, 'refs/tags/') && env.APPLE_CERTIFICATE_BASE64 != ''
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create a temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -t 3600 -u $KEYCHAIN_PATH
          
          # Import certificate to keychain
          echo "$APPLE_CERTIFICATE_BASE64" | base64 --decode > $RUNNER_TEMP/certificate.p12
          security import $RUNNER_TEMP/certificate.p12 -k $KEYCHAIN_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

# Removing this step as it's handled comprehensively in the 'Prepare and Sign DMG' step

      - name: Prepare and Sign DMG
        if: startsWith(github.ref, 'refs/tags/') && env.APPLE_DEVELOPER_ID != ''
        env:
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: |
          # Get version from pyproject.toml
          VERSION=$(grep -m 1 "version" pyproject.toml | grep -o '"[^"]*"' | sed 's/"//g')
          echo "Building AV-Spex version $VERSION"
          
          # Install create-dmg
          brew install create-dmg
          
          # Create a folder to prepare our DMG in
          mkdir -p dist/dmg
          # Empty the dmg folder if it exists
          rm -rf dist/dmg/*
          # Copy the app bundle to the dmg folder
          cp -R "dist/AV-Spex.app" dist/dmg
          # Make sure permissions are correct
          chmod -R 755 dist/dmg/AV-Spex.app
          
          # Create entitlements file
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
              <key>com.apple.security.automation.apple-events</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Sign each framework/library/plugin individually first
          echo "Signing frameworks and libraries..."
          find dist/dmg/AV-Spex.app/Contents/Frameworks -type f -name "*.so" -o -name "*.dylib" | while read file; do
            codesign --force --timestamp --options runtime --sign "$APPLE_DEVELOPER_ID" "$file"
          done
          
          # Sign Python executables
          echo "Signing Python executables..."
          find dist/dmg/AV-Spex.app/Contents -type f -name "python*" | while read file; do
            codesign --force --timestamp --options runtime --sign "$APPLE_DEVELOPER_ID" "$file"
          done
          
          # Sign any other executables in MacOS folder
          echo "Signing other executables..."
          find dist/dmg/AV-Spex.app/Contents/MacOS -type f -perm +111 | while read file; do
            codesign --force --timestamp --options runtime --entitlements entitlements.plist --sign "$APPLE_DEVELOPER_ID" "$file"
          done
          
          # Sign the main app bundle with entitlements
          echo "Signing main application bundle..."
          codesign --force --deep --timestamp --options runtime --entitlements entitlements.plist --sign "$APPLE_DEVELOPER_ID" dist/dmg/AV-Spex.app
          
          # Verify the application is properly signed and is a universal binary
          echo "Verifying signing and architecture:"
          codesign --verify --verbose dist/dmg/AV-Spex.app
          
          # Check architecture of main executable and a few libraries
          echo "Checking architecture of binaries:"
          find dist/dmg/AV-Spex.app -type f -name "AV-Spex" | xargs lipo -info || echo "Main executable not found"
          find dist/dmg/AV-Spex.app -name "*.so" -or -name "*.dylib" | head -n 3 | xargs lipo -info
          
          # If the DMG already exists, delete it
          test -f "dist/AV-Spex-$VERSION.dmg" && rm "dist/AV-Spex-$VERSION.dmg"
          
          # Create the DMG with version number
          create-dmg \
            --volname "AV-Spex $VERSION" \
            --volicon "av_spex_the_logo.icns" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "AV-Spex.app" 175 120 \
            --hide-extension "AV-Spex.app" \
            --app-drop-link 425 120 \
            --no-internet-enable \
            "dist/AV-Spex-$VERSION.dmg" \
            "dist/dmg"
          
          # Sign the DMG itself
          codesign --force --timestamp --sign "$APPLE_DEVELOPER_ID" "dist/AV-Spex-$VERSION.dmg"
          # Verify signing
          codesign --verify --verbose "dist/AV-Spex-$VERSION.dmg"

      - name: Notarize macOS App
        if: startsWith(github.ref, 'refs/tags/') && env.APPLE_ID != ''
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          VERSION=$(grep -m 1 "version" pyproject.toml | grep -o '"[^"]*"' | sed 's/"//g')
          DMG_PATH="dist/AV-Spex-$VERSION.dmg"
          
          echo "Submitting DMG for notarization..."
          # Create a keychain profile for notarization
          xcrun notarytool store-credentials "github-actions" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID"
          
          # Submit DMG for notarization using the keychain profile
          xcrun notarytool submit "$DMG_PATH" \
            --keychain-profile "github-actions" \
            --wait \
            --timeout 1800
          
          # Staple the notarization ticket to the DMG
          echo "Stapling ticket to DMG..."
          xcrun stapler staple "$DMG_PATH"
          
          echo "Build and notarization process complete for AV-Spex version $VERSION!"

      - name: Upload DMG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: AV-Spex-DMG
          path: dist/AV-Spex-*.dmg
          if-no-files-found: error

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/AV-Spex-*.dmg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}