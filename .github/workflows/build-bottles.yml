name: Build Bottles

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name to build bottles for (e.g., v1.2.3)'
        required: true
        type: string

jobs:
  build-bottles:
    name: Build bottles
    strategy:
        matrix:
          include:
            - os: macos-14
              arch: arm64
              bottle_tag: arm64_sonoma
            - os: macos-13
              arch: x86_64
              bottle_tag: ventura
        fail-fast: false
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Set up Homebrew
      uses: Homebrew/actions/setup-homebrew@master
    
    - name: Checkout repository for git tags
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get and validate version
      id: version
      run: |
        VERSION="${{ github.event.inputs.tag_name }}"
        
        echo "📥 Input version: $VERSION"
        
        # Validate that we have a version that looks like a tag
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.2.3"
          exit 1
        fi
        
        VERSION_CLEAN=${VERSION#v}
        echo "version=${VERSION_CLEAN}" >> $GITHUB_OUTPUT
        echo "tag_name=${VERSION}" >> $GITHUB_OUTPUT
        
        echo "✅ Building bottles for version: $VERSION_CLEAN"
    
    - name: Clean environment and fix Python conflicts
      run: |
        # Disable auto-updates to prevent conflicts
        export HOMEBREW_NO_AUTO_UPDATE=1
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        export HOMEBREW_NO_INSTALL_UPGRADE=1
        
        echo "=== Initial Python State ==="
        which python3 || echo "No python3 found"
        python3 --version || echo "python3 not working"
        ls -la /usr/local/bin/python* || echo "No python in /usr/local/bin"
        echo "==========================="
        
        # Clean up any existing conflicting symlinks
        echo "Removing conflicting Python symlinks..."
        sudo rm -f /usr/local/bin/python3*
        sudo rm -f /usr/local/bin/pip3*
        sudo rm -f /usr/local/bin/idle3*
        sudo rm -f /usr/local/bin/pydoc3*
        
        # Clean up any existing Python installations
        echo "Cleaning up existing Python installations..."
        brew cleanup || true
        
        # Uninstall any existing Python versions that might conflict
        for python_ver in python@3.13 python@3.12 python@3.11; do
          if brew list $python_ver &>/dev/null; then
            echo "Uninstalling $python_ver..."
            brew uninstall --ignore-dependencies $python_ver || echo "Could not uninstall $python_ver"
          fi
        done
    
    - name: Install clean Python environment
      run: |
        export HOMEBREW_NO_AUTO_UPDATE=1
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        export HOMEBREW_NO_INSTALL_UPGRADE=1
        
        # Install python@3.10 first
        echo "Installing python@3.10..."
        brew install python@3.10
        
        # Force link python@3.10 to ensure it's the primary Python
        echo "Linking python@3.10..."
        brew link --overwrite python@3.10
        
        # Verify Python installation
        echo "=== Python Verification ==="
        which python3
        python3 --version
        which pip3
        pip3 --version
        echo "=========================="
        
        # Install other dependencies
        echo "Installing PyQt and Qt..."
        brew install pyqt qt@6
    
    - name: Tap repository and build bottle
      id: build
      run: |
        export HOMEBREW_NO_AUTO_UPDATE=1
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        export HOMEBREW_NO_INSTALL_UPGRADE=1
        
        # Tap the repository
        brew tap JPC-AV/AV-Spex https://github.com/JPC-AV/homebrew-AV-Spex

        # Update tap to get the latest formula
        brew tap --repair
        brew update
        
        echo "=== Final Python Check ==="
        python3 --version
        pip3 --version
        brew list | grep python
        echo "=========================="
        
        # Build the bottle
        echo "Building bottle..."
        brew install --build-bottle JPC-AV/AV-Spex/av-spex
        
        echo "Creating bottle..."
        brew bottle --verbose --json --root-url=https://github.com/JPC-AV/video_qc_jpc_av/releases/download/v${{ steps.version.outputs.version }} JPC-AV/AV-Spex/av-spex
        
        BOTTLE_FILE=$(ls av-spex--*.bottle.tar.gz | head -1)
        echo "bottle_file=${BOTTLE_FILE}" >> $GITHUB_OUTPUT
        
        echo "Created bottle: $BOTTLE_FILE"
    
    - name: Test bottle
      run: |
        echo "Testing bottle installation..."
        brew uninstall JPC-AV/AV-Spex/av-spex
        brew install ${{ steps.build.outputs.bottle_file }}
        
        echo "Testing av-spex commands..."
        av-spex --version
        av-spex --help
    
    - name: Upload bottle
      uses: actions/upload-artifact@v4
      with:
        name: bottle-${{ matrix.bottle_tag }}-v${{ steps.version.outputs.version }}
        path: |
          av-spex--*.bottle.tar.gz
          av-spex--*.bottle.json
        retention-days: 30

  update-formula:
    name: Update formula with bottles
    needs: build-bottles
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Checkout homebrew tap
      uses: actions/checkout@v4
      with:
        repository: JPC-AV/homebrew-AV-Spex
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        path: homebrew-tap
    
    - name: Get version
      id: version
      run: |
        VERSION="${{ github.event.inputs.tag_name }}"
        VERSION_CLEAN=${VERSION#v}
        echo "version=${VERSION_CLEAN}" >> $GITHUB_OUTPUT
        echo "tag_name=${VERSION}" >> $GITHUB_OUTPUT
        echo "✅ Updating formula for version: $VERSION_CLEAN"
    
    - name: Download bottles
      uses: actions/download-artifact@v4
      with:
        path: bottles/
    
    - name: Extract bottle info
      id: bottles
      run: |
        cd bottles/
        
        ARM64_SHA=""
        VENTURA_SHA=""
        
        echo "=== Available bottle artifacts ==="
        ls -la
        echo "================================="
        
        for dir in bottle-*/; do
          echo "Processing directory: $dir"
          ls -la "$dir"
          
          if [[ -f "${dir}av-spex--"*".bottle.json" ]]; then
            JSON_FILE="${dir}av-spex--"*".bottle.json"
            
            echo "Processing $JSON_FILE"
            cat "$JSON_FILE"
            
            if [[ "$dir" == *"arm64_sonoma"* ]]; then
              ARM64_SHA=$(jq -r '.["JPC-AV/AV-Spex/av-spex"].bottle.tags.arm64_sonoma.sha256' "$JSON_FILE")
              echo "Found ARM64 SHA: $ARM64_SHA"
            elif [[ "$dir" == *"ventura"* ]]; then
              VENTURA_SHA=$(jq -r '.["JPC-AV/AV-Spex/av-spex"].bottle.tags.ventura.sha256' "$JSON_FILE")
              echo "Found Ventura SHA: $VENTURA_SHA"
            fi
          fi
        done
        
        echo "arm64_sha=${ARM64_SHA}" >> $GITHUB_OUTPUT
        echo "ventura_sha=${VENTURA_SHA}" >> $GITHUB_OUTPUT
        
        echo "📋 Final extracted SHAs:"
        echo "ARM64 (arm64_sonoma): $ARM64_SHA"
        echo "Ventura: $VENTURA_SHA"
    
    - name: Update formula with bottles
      run: |
        cd homebrew-tap
        
        echo "📦 Downloading source archive to get SHA256..."
        curl -L "https://github.com/JPC-AV/video_qc_jpc_av/archive/refs/tags/v${{ steps.version.outputs.version }}.tar.gz" -o release.tar.gz
        SOURCE_SHA256=$(sha256sum release.tar.gz | cut -d' ' -f1)
        rm release.tar.gz
        
        echo "📝 Creating formula with bottle block..."
        
        # Create the formula with bottle block
        cat > Formula/AV-Spex.rb << EOF
        class AvSpex < Formula
          include Language::Python::Virtualenv

          desc "Python project for NMAAHC media conservation lab"
          homepage "https://github.com/JPC-AV/video_qc_jpc_av"
          url "https://github.com/JPC-AV/video_qc_jpc_av/archive/refs/tags/v${{ steps.version.outputs.version }}.tar.gz"
          sha256 "${SOURCE_SHA256}"
          license "GPL-3.0-only"

          bottle do
            root_url "https://github.com/JPC-AV/video_qc_jpc_av/releases/download/v${{ steps.version.outputs.version }}"
        EOF
        
        # Add bottle SHAs if they exist
        if [[ -n "${{ steps.bottles.outputs.arm64_sha }}" && "${{ steps.bottles.outputs.arm64_sha }}" != "null" && "${{ steps.bottles.outputs.arm64_sha }}" != "" ]]; then
          echo "    sha256 cellar: :any_skip_relocation, arm64_sonoma: \"${{ steps.bottles.outputs.arm64_sha }}\"" >> Formula/AV-Spex.rb
          echo "✅ Added ARM64 bottle SHA"
        else
          echo "⚠️ No ARM64 bottle SHA found"
        fi
        
        if [[ -n "${{ steps.bottles.outputs.ventura_sha }}" && "${{ steps.bottles.outputs.ventura_sha }}" != "null" && "${{ steps.bottles.outputs.ventura_sha }}" != "" ]]; then
          echo "    sha256 cellar: :any_skip_relocation, ventura: \"${{ steps.bottles.outputs.ventura_sha }}\"" >> Formula/AV-Spex.rb
          echo "✅ Added Ventura bottle SHA"
        else
          echo "⚠️ No Ventura bottle SHA found"
        fi
        
        # Complete the formula
        cat >> Formula/AV-Spex.rb << 'EOF'
          end

          depends_on "python@3.10"
          depends_on "pyqt"
          depends_on "qt@6"
          
          resource "setuptools" do
            url "https://files.pythonhosted.org/packages/92/ec/089608b791d210aec4e7f97488e67ab0d33add3efccb83a056cbafe3a2a6/setuptools-75.8.0.tar.gz"
            sha256 "c5afc8f407c626b8313a86e10311dd3f661c6cd9c09d4bf8c15c0e11f9f2b0e6"
          end

          resource "toml" do
            url "https://files.pythonhosted.org/packages/be/ba/1f744cdc819428fc6b5084ec34d9b30660f6f9daaf70eead706e3203ec3c/toml-0.10.2.tar.gz"
            sha256 "b3bda1d108d5dd99f4a20d24d9c348e91c4db7ab1b749200bded2f839ccbe68f"
          end

          resource "art" do
            url "https://files.pythonhosted.org/packages/b6/15/6c4ac6bf544a01230bad5b45ce4f624051b9dc9567875da05cfdbfc2cafa/art-6.1.tar.gz"
            sha256 "6ab3031e3b7710039e73497b0e750cadfe04d4c1279ce3a123500dbafb9e1b64"
          end

          resource "colorlog" do
            url "https://files.pythonhosted.org/packages/78/6b/4e5481ddcdb9c255b2715f54c863629f1543e97bc8c309d1c5c131ad14f2/colorlog-6.7.0.tar.gz"
            sha256 "bd94bd21c1e13fac7bd3153f4bc3a7dc0eb0974b8bc2fdf1a989e474f6e582e5"
          end

          resource "appdirs" do
            url "https://files.pythonhosted.org/packages/d7/d8/05696357e0311f5b5c316d7b95f46c669dd9c15aaeecbb48c7d0aeb88c40/appdirs-1.4.4.tar.gz"
            sha256 "7d5d0167b2b1ba821647616af46a749d1c653740dd0d2415100fe26e27afdf41"
          end

          resource "lxml" do
            url "https://files.pythonhosted.org/packages/ef/f6/c15ca8e5646e937c148e147244817672cf920b56ac0bf2cc1512ae674be8/lxml-5.3.1.tar.gz"
            sha256 "106b7b5d2977b339f1e97efe2778e2ab20e99994cbb0ec5e55771ed0795920c8"
          end

          resource "plotly" do
            url "https://files.pythonhosted.org/packages/db/9e/31b2f0b8f2357cd5f3e992c76c3e4e85a5cbbad8b8c5f23d0684e3f4c608/plotly-5.23.0.tar.gz"
            sha256 "89e57d003a116303a34de6700862391367dd564222ab71f8531df70279fc0193"
          end

          def install
            venv = virtualenv_create(libexec, "python3")
            
            venv.pip_install resources.reject { |r| r.name == "plotly" || r.name == "lxml" }

            system libexec/"bin/python", "-m", "pip", "install", "--no-deps", "--only-binary", ":all:", "plotly==5.23.0"

            system libexec/"bin/python", "-m", "pip", "install", "--no-deps", "--only-binary", ":all:", "lxml==5.3.1"

            venv.pip_install_and_link buildpath
            
            bin.install_symlink libexec/"bin/av-spex"
            bin.install_symlink libexec/"bin/av-spex-gui"
          end

          test do
            system bin/"av-spex", "--version"
          end
        end
        EOF
        
        echo "=== Updated Formula ==="
        head -30 Formula/AV-Spex.rb
        echo "... (truncated for brevity) ..."
        echo "======================"
    
    - name: Commit and push changes
      run: |
        cd homebrew-tap
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Show what we're about to commit
        echo "=== GIT STATUS ==="
        git status
        echo "=================="
        
        echo "=== GIT DIFF ==="
        git diff Formula/AV-Spex.rb
        echo "================"
        
        git add Formula/AV-Spex.rb
        
        if git diff --staged --quiet; then
          echo "ℹ️ No changes to commit - formula already up to date"
        else
          echo "📝 Committing formula with bottles..."
          git commit -m "Update AV-Spex to version ${{ steps.version.outputs.version }} with bottles" \
                     -m "- Updated source to tag v${{ steps.version.outputs.version }}" \
                     -m "- Added ARM64 bottle: ${{ steps.bottles.outputs.arm64_sha }}" \
                     -m "- Added Ventura bottle: ${{ steps.bottles.outputs.ventura_sha }}" \
                     -m "- Automated update with bottle builds"
          
          echo "🚀 Pushing changes..."
          git push
          echo "✅ Formula with bottles updated successfully!"
        fi
