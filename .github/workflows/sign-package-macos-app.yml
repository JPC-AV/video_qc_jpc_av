name: Sign and Package macOS App
on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  sign-and-package:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download unsigned app
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: macos-app-build.yml
        name: AV-Spex-App
        path: dist/app_download/
        
    - name: Download version info
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: macos-app-build.yml
        name: app-version
        path: dist/
        
    - name: Set version
      run: |
        if [ -f "dist/version.txt" ]; then
          VERSION=$(cat dist/version.txt)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Found version file with version: $VERSION"
        else
          # Fallback: extract version from pyproject.toml
          echo "Version file not found. Extracting from pyproject.toml..."
          VERSION=$(grep -m 1 "version" pyproject.toml | grep -o '"[^"]*"' | sed 's/"//g')
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version from pyproject.toml: $VERSION"
        fi
        
    - name: Prepare app bundle and finalize PyInstaller
      run: |
        echo "Preparing app bundle..."
        
        # See if Contents folder is at the root or inside an .app bundle
        if [ -d "dist/app_download/Contents" ]; then
          echo "Found Contents folder at root of artifact"
          mkdir -p "dist/AV-Spex.app"
          cp -R dist/app_download/Contents "dist/AV-Spex.app/"
        elif [ -d "dist/app_download/AV-Spex.app" ]; then
          echo "Found AV-Spex.app directory inside artifact"
          cp -R dist/app_download/AV-Spex.app dist/
        else
          echo "Couldn't find expected app structure, will try to use what we have"
          echo "Contents of app_download:"
          find dist/app_download -type d | head -10
          mkdir -p "dist/AV-Spex.app/Contents"
          cp -R dist/app_download/* "dist/AV-Spex.app/Contents/"
        fi
        
        # CRITICAL: Trigger PyInstaller to create any remaining files by running the app briefly
        echo "Triggering PyInstaller lazy loading to create all files..."
        export PYTHONPATH="$(pwd)"
        timeout 15s dist/AV-Spex.app/Contents/MacOS/AV-Spex --help > /dev/null 2>&1 || echo "App initialization completed (timeout expected)"
        
        # Wait a moment for any file system operations to complete
        sleep 2
        
        # Now clean up problematic files that cause signing issues
        echo "Cleaning up problematic files after PyInstaller finalization..."
        find dist/AV-Spex.app/Contents -name "pyproject.toml" -delete 2>/dev/null || true
        
        # Remove ALL Plotly data files that cause signing issues
        echo "Removing ALL Plotly data files that cause signing issues..."
        find dist/AV-Spex.app/Contents -path "*/plotly/package_data/*" -type f -delete 2>/dev/null || true
        find dist/AV-Spex.app/Contents -name "*.json" -path "*/plotly/*" -delete 2>/dev/null || true
        find dist/AV-Spex.app/Contents -name "*.csv*" -path "*/plotly/*" -delete 2>/dev/null || true
        find dist/AV-Spex.app/Contents -name "*.js" -path "*/plotly/*" -delete 2>/dev/null || true
        echo "Removed all plotly package data files"
        
        # Verify the app bundle structure
        echo "Verifying app bundle structure..."
        ls -la dist/AV-Spex.app/Contents/
        ls -la dist/AV-Spex.app/Contents/MacOS/
        
        # Set proper permissions
        chmod -R 755 dist/AV-Spex.app
        
        # Create a complete file manifest before signing
        echo "Creating file manifest for verification..."
        find dist/AV-Spex.app -type f > /tmp/app_files_before_signing.txt
        echo "Total files before signing: $(wc -l < /tmp/app_files_before_signing.txt)"
        
    - name: Set up keychain
      env:
        CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import certificate to keychain
        echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
        security import certificate.p12 -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # Verify certificate was imported
        security find-identity -v $KEYCHAIN_PATH
        
        # Delete the certificate file
        rm certificate.p12
        
    - name: Setup notarytool credentials
      run: |
        xcrun notarytool store-credentials "GITHUB_ACTIONS_PROFILE" \
          --apple-id ${{ secrets.APPLE_ID }} \
          --team-id ${{ secrets.APPLE_TEAM_ID }} \
          --password ${{ secrets.APPLE_ID_PASSWORD }}
          
    - name: Create entitlements file
      run: |
        cat > entitlements.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.cs.allow-jit</key>
            <true/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <true/>
            <key>com.apple.security.cs.disable-library-validation</key>
            <true/>
            <key>com.apple.security.cs.allow-dyld-environment-variables</key>
            <true/>
            <key>com.apple.security.automation.apple-events</key>
            <true/>
        </dict>
        </plist>
        EOF
        
    - name: Sign app bundle with streamlined approach
      env:
        DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
      run: |
        echo "Starting streamlined code signing process..."
        echo "Using Developer ID: $DEVELOPER_ID"
        
        # Fix framework structure issues that cause "bundle format is ambiguous" errors
        echo "Fixing framework structures..."
        
        # Fix Python framework - remove problematic top-level binaries
        for location in "dist/AV-Spex.app/Contents/Frameworks" "dist/AV-Spex.app/Contents/Resources"; do
          if [ -f "$location/Python.framework/Python" ] && [ ! -L "$location/Python.framework/Python" ]; then
            echo "Removing problematic Python framework binary: $location/Python.framework/Python"
            rm -f "$location/Python.framework/Python"
          fi
          
          # Remove Info.plist files that make frameworks look like app bundles
          rm -f "$location/Python.framework/Info.plist" 2>/dev/null || true
          rm -f "$location/Python.framework/Resources/Info.plist" 2>/dev/null || true
          
          # Ensure proper symlink structure
          if [ -f "$location/Python.framework/Versions/Current/Python" ] && [ ! -L "$location/Python.framework/Python" ]; then
            echo "Creating proper symlink for Python framework"
            ln -sf "Versions/Current/Python" "$location/Python.framework/Python"
          fi
        done
        
        # Fix Qt frameworks - remove problematic top-level binaries
        QT_FRAMEWORKS="QtCore QtGui QtWidgets QtNetwork QtSvg QtDBus QtPdf"
        for framework in $QT_FRAMEWORKS; do
          for location in "dist/AV-Spex.app/Contents/Frameworks" "dist/AV-Spex.app/Contents/Resources"; do
            framework_binary="$location/PyQt6/Qt6/lib/${framework}.framework/${framework}"
            if [ -f "$framework_binary" ] && [ ! -L "$framework_binary" ]; then
              echo "Removing problematic Qt framework binary: $framework_binary"
              rm -f "$framework_binary"
            fi
          done
        done
        
        # Sign in proper order: leaf binaries first, then the main bundle
        echo "Signing leaf binaries first..."
        
        # Sign all .so files (Python extensions)
        find dist/AV-Spex.app/Contents -name "*.so" -type f | while read file; do
          echo "Signing .so: $file"
          codesign --force --timestamp --options runtime --sign "$DEVELOPER_ID" "$file" || echo "Failed to sign $file"
        done
        
        # Sign all .dylib files
        find dist/AV-Spex.app/Contents -name "*.dylib" -type f | while read file; do
          echo "Signing .dylib: $file"
          codesign --force --timestamp --options runtime --sign "$DEVELOPER_ID" "$file" || echo "Failed to sign $file"
        done
        
        # Sign framework versioned binaries (not symlinks or top-level binaries)
        find dist/AV-Spex.app/Contents -path "*/Versions/*/Python" -type f | while read file; do
          echo "Signing Python framework binary: $file"
          codesign --force --timestamp --options runtime --sign "$DEVELOPER_ID" "$file" || echo "Failed to sign $file"
        done
        
        # Sign the main executable
        if [ -f "dist/AV-Spex.app/Contents/MacOS/AV-Spex" ]; then
          echo "Signing main executable..."
          codesign --force --timestamp --options runtime --entitlements entitlements.plist --sign "$DEVELOPER_ID" "dist/AV-Spex.app/Contents/MacOS/AV-Spex"
        fi
        
        # Final step: Sign the entire app bundle
        echo "Signing the entire app bundle..."
        if codesign --force --timestamp --options runtime --entitlements entitlements.plist --sign "$DEVELOPER_ID" dist/AV-Spex.app; then
          echo "✓ App bundle signing successful"
        else
          echo "❌ App bundle signing failed"
          exit 1
        fi
        
        # Verify the signature
        echo "Verifying code signature..."
        if codesign --verify --deep --verbose dist/AV-Spex.app; then
          echo "✓ Code signature verification successful"
        else
          echo "❌ Code signature verification failed"
          codesign --verify --verbose=4 dist/AV-Spex.app 2>&1 || true
          exit 1
        fi
        
        # Create DMG preparation folder
        echo "Creating DMG preparation folder..."
        mkdir -p dist/dmg
        cp -R "dist/AV-Spex.app" dist/dmg/
        
        # Create DMG
        echo "Creating DMG with hdiutil..."
        if hdiutil create -volname "AV-Spex $APP_VERSION" -srcfolder dist/dmg -ov -format UDZO "dist/AV-Spex-$APP_VERSION.dmg"; then
          echo "✓ DMG creation successful"
        else
          echo "❌ DMG creation failed"
          exit 1
        fi
          
        # Sign the DMG
        echo "Signing DMG..."
        if codesign --force --timestamp --sign "$DEVELOPER_ID" "dist/AV-Spex-$APP_VERSION.dmg"; then
          echo "✓ DMG signing successful"
        else
          echo "❌ DMG signing failed"
          exit 1
        fi
        
    - name: Notarize DMG
      run: |
        echo "Submitting DMG for notarization..."
        
        # Submit for notarization and wait
        if xcrun notarytool submit "dist/AV-Spex-$APP_VERSION.dmg" \
          --keychain-profile "GITHUB_ACTIONS_PROFILE" \
          --wait --timeout 1800; then
          
          echo "Notarization successful, stapling ticket..."
          xcrun stapler staple "dist/AV-Spex-$APP_VERSION.dmg"
          echo "✓ Notarization and stapling completed successfully"
        else
          echo "❌ Notarization failed"
          
          # Get the submission ID from recent submissions to see the log
          SUBMISSION_ID=$(xcrun notarytool history --keychain-profile "GITHUB_ACTIONS_PROFILE" | head -3 | tail -1 | awk '{print $1}')
          if [ ! -z "$SUBMISSION_ID" ]; then
            echo "Getting notarization log for submission: $SUBMISSION_ID"
            xcrun notarytool log $SUBMISSION_ID --keychain-profile "GITHUB_ACTIONS_PROFILE" || true
          fi
          exit 1
        fi
        
    - name: Upload signed app as artifact
      uses: actions/upload-artifact@v4
      with:
        name: AV-Spex-Signed-App
        path: dist/dmg/AV-Spex.app/
        
    - name: Upload DMG as artifact
      uses: actions/upload-artifact@v4
      with:
        name: AV-Spex-DMG
        path: dist/AV-Spex-${{ env.APP_VERSION }}.dmg
        
    - name: Attach to Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/AV-Spex-${{ env.APP_VERSION }}.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
