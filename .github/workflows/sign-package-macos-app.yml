name: Sign and Package macOS App
on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  sign-and-package:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download unsigned app
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: macos-app-build.yml
        name: AV-Spex-App
        path: dist/app_download/
        
    - name: Download version info
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: macos-app-build.yml
        name: app-version
        path: dist/
        
    - name: Set version
      run: |
        if [ -f "dist/version.txt" ]; then
          echo "APP_VERSION=$(cat dist/version.txt)" >> $GITHUB_ENV
        else
          # Fallback: extract version from pyproject.toml
          echo "Version file not found. Extracting from pyproject.toml..."
          VERSION=$(grep -m 1 "version" pyproject.toml | grep -o '"[^"]*"' | sed 's/"//g')
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        fi
        echo "Using version: ${{ env.APP_VERSION }}"
        
    - name: Prepare app bundle
      run: |
        echo "Preparing app bundle..."
        
        # See if Contents folder is at the root or inside an .app bundle
        if [ -d "dist/app_download/Contents" ]; then
          echo "Found Contents folder at root of artifact"
          mkdir -p "dist/AV-Spex.app"
          cp -R dist/app_download/Contents "dist/AV-Spex.app/"
        elif [ -d "dist/app_download/AV-Spex.app" ]; then
          echo "Found AV-Spex.app directory inside artifact"
          cp -R dist/app_download/AV-Spex.app dist/
        else
          echo "Couldn't find expected app structure, will try to use what we have"
          mkdir -p "dist/AV-Spex.app/Contents"
          cp -R dist/app_download/* "dist/AV-Spex.app/Contents/"
        fi
        
        # Create DMG preparation folder
        mkdir -p dist/dmg
        cp -R "dist/AV-Spex.app" dist/dmg/
        chmod -R 755 dist/dmg/AV-Spex.app
        
    - name: Install create-dmg
      run: brew install create-dmg
      
    - name: Set up keychain
      env:
        CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import certificate to keychain
        echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
        security import certificate.p12 -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # Delete the certificate file
        rm certificate.p12
        
    - name: Setup notarytool credentials
      run: |
        xcrun notarytool store-credentials "GITHUB_ACTIONS_PROFILE" \
          --apple-id ${{ secrets.APPLE_ID }} \
          --team-id ${{ secrets.APPLE_TEAM_ID }} \
          --password ${{ secrets.APPLE_ID_PASSWORD }}
          
    - name: Create entitlements file
      run: |
        cat > entitlements.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.cs.allow-jit</key>
            <true/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <true/>
            <key>com.apple.security.cs.disable-library-validation</key>
            <true/>
            <key>com.apple.security.cs.allow-dyld-environment-variables</key>
            <true/>
            <key>com.apple.security.automation.apple-events</key>
            <true/>
        </dict>
        </plist>
        EOF
        
    - name: Fix problematic files
      run: |
        echo "Removing problematic files that could interfere with signing..."
        
        # Inspect the app bundle structure
        echo "App bundle structure:"
        find dist/dmg/AV-Spex.app -type d -name "Python*" | xargs ls -la
        
        # Move the base_library.zip out of the Frameworks directory
        if [ -f "dist/dmg/AV-Spex.app/Contents/Frameworks/base_library.zip" ]; then
          echo "Moving base_library.zip from Frameworks to Resources..."
          mkdir -p "dist/dmg/AV-Spex.app/Contents/Resources/lib" || true
          mv "dist/dmg/AV-Spex.app/Contents/Frameworks/base_library.zip" "dist/dmg/AV-Spex.app/Contents/Resources/lib/" || true
        fi
        
        # Handle Python.framework - ignore errors
        if [ -d "dist/dmg/AV-Spex.app/Contents/Frameworks/Python.framework" ]; then
          echo "Found Python.framework in Frameworks directory"
          
          # Let's rename the Python directory in Resources if it exists
          if [ -d "dist/dmg/AV-Spex.app/Contents/Resources/Python" ]; then
            echo "Renaming existing Resources/Python to Resources/Python-old"
            mv "dist/dmg/AV-Spex.app/Contents/Resources/Python" "dist/dmg/AV-Spex.app/Contents/Resources/Python-old" || true
          fi
          
          # Create a new directory with a different name
          echo "Creating Resources/PythonFramework directory..."
          mkdir -p "dist/dmg/AV-Spex.app/Contents/Resources/PythonFramework" || true
          
          # Try to move the framework, ignoring errors
          echo "Moving Python.framework out of Frameworks..."
          cp -R "dist/dmg/AV-Spex.app/Contents/Frameworks/Python.framework" "dist/dmg/AV-Spex.app/Contents/Resources/PythonFramework/" || true
          rm -rf "dist/dmg/AV-Spex.app/Contents/Frameworks/Python.framework" || true
        fi
        
        # Special handling for ZIP files which should not be in Frameworks
        echo "Moving ZIP files out of Frameworks..."
        find dist/dmg/AV-Spex.app/Contents/Frameworks -name "*.zip" | xargs -I{} mv {} dist/dmg/AV-Spex.app/Contents/Resources/ 2>/dev/null || true
        
        # Remove any non-binary files that might cause signing issues
        echo "Removing non-binary files that might cause signing issues..."
        find dist/dmg/AV-Spex.app -type f \( -name "*.py" -o -name "*.toml" -o -name "*.txt" -o -name "*.csv" -o -name "*.gz" -o -name "*.md" -o -name "*.json" \) -delete || true
        
    - name: Create simple version for signing
      run: |
        echo "Creating a simplified app copy for signing..."
        
        # Create a fresh directory structure
        mkdir -p dist/simple_app/AV-Spex.app/Contents/{MacOS,Resources,Frameworks}
        
        # Copy essential components
        cp -R dist/dmg/AV-Spex.app/Contents/Info.plist dist/simple_app/AV-Spex.app/Contents/
        cp -R dist/dmg/AV-Spex.app/Contents/MacOS/* dist/simple_app/AV-Spex.app/Contents/MacOS/
        
        # Only copy binary files from Frameworks
        echo "Copying only binary files from Frameworks..."
        mkdir -p dist/simple_app/AV-Spex.app/Contents/Frameworks
        
        # Find and copy all dylib files
        find dist/dmg/AV-Spex.app/Contents/Frameworks -name "*.dylib" | while read file; do
          rel_path=${file#dist/dmg/AV-Spex.app/Contents/Frameworks/}
          target_dir="dist/simple_app/AV-Spex.app/Contents/Frameworks/$(dirname "$rel_path")"
          mkdir -p "$target_dir" || true
          cp "$file" "$target_dir/" || true
        done
        
        # Find and copy all .so files
        find dist/dmg/AV-Spex.app/Contents/Frameworks -name "*.so" | while read file; do
          rel_path=${file#dist/dmg/AV-Spex.app/Contents/Frameworks/}
          target_dir="dist/simple_app/AV-Spex.app/Contents/Frameworks/$(dirname "$rel_path")"
          mkdir -p "$target_dir" || true
          cp "$file" "$target_dir/" || true
        done
        
        # Copy resources that are needed
        mkdir -p dist/simple_app/AV-Spex.app/Contents/Resources
        
        # Use this app bundle for signing
        rm -rf dist/dmg/AV-Spex.app
        cp -R dist/simple_app/AV-Spex.app dist/dmg/
        chmod -R 755 dist/dmg/AV-Spex.app
        
    - name: Sign binary files
      env:
        DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
      run: |
        # First sign all .dylib files
        echo "Signing dylib files..."
        find dist/dmg/AV-Spex.app -name "*.dylib" | while read file; do
          echo "Signing $file"
          codesign --force --timestamp --options runtime --sign "$DEVELOPER_ID" "$file" || echo "Failed to sign $file, continuing..."
        done
        
        # Then sign all .so files
        echo "Signing .so files..."
        find dist/dmg/AV-Spex.app -name "*.so" | while read file; do
          echo "Signing $file"
          codesign --force --timestamp --options runtime --sign "$DEVELOPER_ID" "$file" || echo "Failed to sign $file, continuing..."
        done
        
        # Sign any executables in MacOS folder
        echo "Signing executables in MacOS folder..."
        find dist/dmg/AV-Spex.app/Contents/MacOS -type f -perm +111 | while read file; do
          echo "Signing $file"
          codesign --force --timestamp --options runtime --entitlements entitlements.plist --sign "$DEVELOPER_ID" "$file" || echo "Failed to sign $file, continuing..."
        done
        
    - name: Sign the main app bundle
      env:
        DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
      run: |
        # Sign the main app bundle
        echo "Signing main application bundle..."
        codesign --force --deep --timestamp --options runtime --entitlements entitlements.plist --sign "$DEVELOPER_ID" dist/dmg/AV-Spex.app
        
        # Verify code signature (but don't fail if there are issues)
        echo "Verifying code signature..."
        codesign --verify --verbose=4 dist/dmg/AV-Spex.app || {
          echo "WARNING: Code verification had issues, but continuing with DMG creation..."
        }
        
    - name: Create and sign DMG
      env:
        DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
      run: |
        # Create DMG with hdiutil
        echo "Creating DMG..."
        rm -f "dist/AV-Spex-${{ env.APP_VERSION }}.dmg"
        hdiutil create -volname "AV-Spex ${{ env.APP_VERSION }}" -srcfolder dist/dmg -ov -format UDZO "dist/AV-Spex-${{ env.APP_VERSION }}.dmg"
          
        # Sign the DMG
        echo "Signing DMG..."
        codesign --force --timestamp --sign "$DEVELOPER_ID" "dist/AV-Spex-${{ env.APP_VERSION }}.dmg"
        
    - name: Notarize DMG with detailed logs
      run: |
        # Submit for notarization
        echo "Submitting DMG for notarization..."
        NOTARIZE_OUTPUT=$(xcrun notarytool submit "dist/AV-Spex-${{ env.APP_VERSION }}.dmg" \
          --keychain-profile "GITHUB_ACTIONS_PROFILE" \
          --wait --timeout 3600)
          
        echo "$NOTARIZE_OUTPUT"
        
        # Extract submission ID
        SUBMISSION_ID=$(echo "$NOTARIZE_OUTPUT" | grep "id:" | head -1 | awk '{print $2}')
        
        if [ -n "$SUBMISSION_ID" ]; then
          echo "Submission ID: $SUBMISSION_ID"
          
          # Get detailed notarization log
          echo "Getting detailed notarization log..."
          xcrun notarytool log $SUBMISSION_ID --keychain-profile "GITHUB_ACTIONS_PROFILE"
          
          # Check status
          STATUS=$(xcrun notarytool info $SUBMISSION_ID --keychain-profile "GITHUB_ACTIONS_PROFILE" | grep "status:" | awk '{print $2}')
          
          if [ "$STATUS" = "Accepted" ]; then
            echo "Notarization successful, stapling ticket..."
            xcrun stapler staple "dist/AV-Spex-${{ env.APP_VERSION }}.dmg"
          else
            echo "Notarization failed with status: $STATUS"
            echo "Will continue to upload unsigned DMG as artifact"
          fi
        else
          echo "Failed to extract submission ID from output. Continuing without notarization."
        fi
        
    - name: Upload signed app as artifact
      uses: actions/upload-artifact@v4
      with:
        name: AV-Spex-Signed-App
        path: dist/dmg/AV-Spex.app/
        
    - name: Upload DMG as artifact (even if notarization failed)
      uses: actions/upload-artifact@v4
      with:
        name: AV-Spex-DMG
        path: dist/AV-Spex-${{ env.APP_VERSION }}.dmg
        
    - name: Attach to Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/AV-Spex-${{ env.APP_VERSION }}.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
