name: Sign and Package macOS App

on:
  workflow_run:
    workflows: ["Build macOS App"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      build_run_id:
        description: 'Build workflow run ID to sign'
        required: true
        type: string

permissions:
  contents: write
  actions: read
  id-token: write

jobs:
  sign-and-package:
    runs-on: macos-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha || github.sha }}
      
    - name: Install dependencies
      run: brew install create-dmg
        
    - name: Download unsigned app bundle
      uses: actions/download-artifact@v4
      with:
        pattern: av-spex-*-unsigned
        path: ./artifacts
        run-id: ${{ github.event.inputs.build_run_id || github.event.workflow_run.id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        merge-multiple: true
        
    - name: Extract build artifacts and get version
      run: |
        APP_ARCHIVE=$(find artifacts -name "*.tar.gz" | head -1)
        if [ -z "$APP_ARCHIVE" ]; then
          echo "‚ùå No app bundle archive found!"
          exit 1
        fi
        
        mkdir -p dist
        tar -xzf "$APP_ARCHIVE" -C dist/
        
        if [ -f "dist/build-info.json" ]; then
          VERSION=$(cat "dist/build-info.json" | jq -r '.version')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "‚úÖ Found version: $VERSION"
        else
          echo "‚ùå Build info not found!"
          exit 1
        fi
        
        if [ ! -d "dist/AV-Spex.app" ]; then
          echo "‚ùå App bundle not found after extraction!"
          exit 1
        fi
        
    - name: Import Code Signing Certificate
      env:
        APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        echo -n "$APPLE_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        CERT_NAME=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep "Developer ID Application" | head -1 | grep -o '"[^"]*"' | sed 's/"//g')
        echo "CERT_NAME=$CERT_NAME" >> $GITHUB_ENV
        
    - name: Create Notarization Profile
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        xcrun notarytool store-credentials "DEV_CERT_PW" \
          --apple-id "$APPLE_ID" \
          --password "$APPLE_ID_PASSWORD" \
          --team-id "$APPLE_TEAM_ID"
          
    - name: Sign App Bundle (Enhanced Qt Focus)
      run: |
        # Create entitlements files
        cat > entitlements.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.cs.allow-jit</key>
            <true/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <true/>
            <key>com.apple.security.cs.disable-library-validation</key>
            <true/>
            <key>com.apple.security.cs.allow-dyld-environment-variables</key>
            <true/>
            <key>com.apple.security.automation.apple-events</key>
            <true/>
        </dict>
        </plist>
        EOF

        cat > qt_entitlements.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.cs.disable-library-validation</key>
            <true/>
        </dict>
        </plist>
        EOF

        chmod -R 755 dist/AV-Spex.app

        # CRITICAL: Sign Qt platform plugins first (for theme detection)
        echo "üéØ Signing Qt platform plugins (critical for theme detection)..."
        QT_PLATFORMS_DIR="dist/AV-Spex.app/Contents/Frameworks/PyQt6/Qt6/plugins/platforms"
        
        if [ -d "$QT_PLATFORMS_DIR" ]; then
          for plugin in "$QT_PLATFORMS_DIR"/*.dylib; do
            if [ -f "$plugin" ]; then
              plugin_name=$(basename "$plugin")
              echo "üîë Signing critical platform plugin: $plugin_name"
              
              if codesign --force --timestamp --options runtime \
                         --entitlements qt_entitlements.plist \
                         --sign "$CERT_NAME" \
                         "$plugin"; then
                echo "‚úÖ Successfully signed: $plugin_name"
              else
                echo "‚ùå Failed to sign $plugin_name - theme detection may fail"
              fi
            fi
          done
        else
          echo "‚ö†Ô∏è  Qt platforms directory not found - theme detection may not work"
        fi

        # Sign other Qt plugins
        if [ -d "dist/AV-Spex.app/Contents/Frameworks/PyQt6/Qt6/plugins" ]; then
          find "dist/AV-Spex.app/Contents/Frameworks/PyQt6/Qt6/plugins" -name "*.dylib" | while read plugin; do
            if [[ "$plugin" != *"/platforms/"* ]]; then
              codesign --force --timestamp --options runtime \
                       --entitlements qt_entitlements.plist \
                       --sign "$CERT_NAME" "$plugin" 2>/dev/null || echo "‚ö†Ô∏è  Failed to sign $(basename "$plugin")"
            fi
          done
        fi

        # Sign other frameworks and libraries
        find dist/AV-Spex.app/Contents/Frameworks -type f \( -name "*.so" -o -name "*.dylib" \) 2>/dev/null | while read file; do
          if [[ "$file" != *"PyQt6/Qt6/plugins"* ]] && [ -f "$file" ]; then
            codesign --force --timestamp --options runtime \
                     --sign "$CERT_NAME" "$file" 2>/dev/null || true
          fi
        done

        # Sign nested frameworks
        find dist/AV-Spex.app/Contents/Frameworks -name "*.framework" -type d 2>/dev/null | while read framework; do
          if [[ "$framework" != *"PyQt6/Qt6/plugins"* ]] && [ -d "$framework" ]; then
            codesign --force --timestamp --options runtime \
                     --sign "$CERT_NAME" "$framework" 2>/dev/null || true
          fi
        done

        # Sign the main executable
        echo "üéØ Signing main executable..."
        codesign --force --timestamp --options runtime \
                 --entitlements entitlements.plist \
                 --sign "$CERT_NAME" \
                 "dist/AV-Spex.app/Contents/MacOS/AV-Spex"

        # Sign the main app bundle
        echo "üì¶ Signing main application bundle..."
        codesign --force --timestamp --options runtime \
                 --entitlements entitlements.plist \
                 --sign "$CERT_NAME" \
                 dist/AV-Spex.app

        echo "‚úÖ Signing process completed"

    - name: Verify Theme Detection (Lightweight)
      run: |
        echo "üß™ Quick theme detection verification..."
        QT_PLATFORMS_DIR="dist/AV-Spex.app/Contents/Frameworks/PyQt6/Qt6/plugins/platforms"
        if [ -d "$QT_PLATFORMS_DIR" ]; then
          PLATFORM_PLUGINS=$(find "$QT_PLATFORMS_DIR" -name "*.dylib" | wc -l)
          echo "‚úÖ Found $PLATFORM_PLUGINS platform plugins"
          
          # Quick signature check on critical plugins
          for plugin in "$QT_PLATFORMS_DIR"/*.dylib; do
            if [ -f "$plugin" ]; then
              if codesign --verify "$plugin" 2>/dev/null; then
                echo "‚úÖ $(basename "$plugin"): Signed and verified"
              else
                echo "‚ùå $(basename "$plugin"): Signature issue"
              fi
            fi
          done
        else
          echo "‚ùå Qt platforms directory missing - theme detection will likely fail"
        fi
        
    - name: Create DMG
      run: |
        mkdir -p dist/dmg
        cp -R "dist/AV-Spex.app" dist/dmg/

        create-dmg \
          --volname "AV-Spex $VERSION" \
          --volicon "av_spex_the_logo.icns" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "AV-Spex.app" 175 120 \
          --hide-extension "AV-Spex.app" \
          --app-drop-link 425 120 \
          --no-internet-enable \
          "dist/AV-Spex-$VERSION.dmg" \
          "dist/dmg"

        codesign --force --timestamp --sign "$CERT_NAME" "dist/AV-Spex-$VERSION.dmg"
        
    - name: Notarize DMG
      run: |
        echo "Submitting DMG for notarization..."
        xcrun notarytool submit "dist/AV-Spex-$VERSION.dmg" --keychain-profile "DEV_CERT_PW" --wait --timeout 1800
        xcrun stapler staple "dist/AV-Spex-$VERSION.dmg"
        
        echo "Final verification..."
        spctl --assess --type execute --verbose dist/AV-Spex.app
        spctl --assess --type install --verbose "dist/AV-Spex-$VERSION.dmg"
        
    - name: Upload signed DMG
      uses: actions/upload-artifact@v4
      with:
        name: AV-Spex-${{ env.VERSION }}-signed-dmg
        path: dist/AV-Spex-${{ env.VERSION }}.dmg
        retention-days: 90
        
    - name: Create Release (for tags)
      if: startsWith(github.event.workflow_run.head_branch, 'v')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/AV-Spex-${{ env.VERSION }}.dmg
        tag_name: ${{ github.event.workflow_run.head_branch }}
        name: AV-Spex ${{ github.event.workflow_run.head_branch }}
        draft: false
        prerelease: false
        body: |
          ## AV-Spex v${{ env.VERSION }}
          
          **Build Information:**
          - Built from commit: ${{ github.event.workflow_run.head_sha }}
          - Build workflow: ${{ github.event.workflow_run.id }}
          - Signed and notarized: ‚úÖ
          
          ### Installation
          1. Download the DMG file below
          2. Open the DMG and drag AV-Spex.app to your Applications folder
          3. The app is signed and notarized for macOS security
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Cleanup Keychain
      if: always()
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true

    - name: Manually trigger Homebrew formula update
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/update-homebrew.yml/dispatches \
          -d '{"ref":"main", "inputs": { "tag_name": "'"$TAG_NAME"'" }}'

